// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Post {
  id      String @id @default(cuid())
  title   String
  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user_id  String
  user     User      @relation(fields: [user_id], references: [id])
  likes    Like[]
  solved  Boolean   @default(false)
  post_type String @default("question")
  commentTo String?
  commentLength Int @default(0)

  @@index([title])
}

model Like {
  id      String @id @default(cuid())
  post_id String
  user_id String
  post    Post   @relation(fields: [post_id], references: [id])
  user    User   @relation(fields: [user_id], references: [id])

  @@index([post_id])
  @@index([user_id])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  likes          Like[]
  karma        Int       @default(0)

  section   Section? @relation(fields: [sectionId], references: [code])
  sectionId String?
}

model Section {
  code     String   @id
  students User[]
  Mentor   Mentor[]

  @@unique([code])
}

model Mentor {
  id        String  @id @default(cuid())
  name      String
  section   Section @relation(fields: [sectionId], references: [code])
  sectionId String
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
